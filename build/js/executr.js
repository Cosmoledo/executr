// Generated by CoffeeScript 1.3.3
(function() {
  var Editor, getCodeElement, insertOutput, normalizeType, runCoffee, runJS;

  runCoffee = function(opts, code) {
    var csOptions, line, output;
    csOptions = $.extend({}, opts.coffeeOptions);
    code = "window.executrResult = do ->\n" + (((function() {
      var _i, _len, _ref, _results;
      _ref = code.split('\n');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push("\t" + line);
      }
      return _results;
    })()).join('\n'));
    CoffeeScript.run(code, csOptions);
    output = window.executrResult;
    delete window.executrResult;
    return output;
  };

  runJS = function(opts, code) {
    return eval(code);
  };

  normalizeType = function(codeType) {
    switch (codeType.toLowerCase()) {
      case 'js':
      case 'javascript':
      case 'text/javascript':
      case 'application/javascript':
        return 'javascript';
      case 'cs':
      case 'coffee':
      case 'coffeescript':
      case 'text/coffeescript':
      case 'application/coffeescript':
        return 'coffeescript';
      default:
        return console.log("Code type " + codeType + " not understood.");
    }
  };

  Editor = (function() {

    function Editor(args) {
      this.el = args.el;
      this.opts = args.opts;
      this.$el = $(this.el);
      this.buildEditor();
      this.addRunButton();
    }

    Editor.prototype.getValue = function() {
      return this.editor.getValue();
    };

    Editor.prototype.addRunButton = function() {
      var _this = this;
      this.$runButton = $('<button>');
      this.$runButton.addClass('executr-run-button');
      this.$runButton.text('RUN');
      this.$editorCont.append(this.$runButton);
      this.$runButton.css({
        top: "" + (this.$editorCont.height() / 2 - this.$runButton.height() / 2) + "px"
      });
      if (this.$editorCont.height() < parseInt(this.$runButton.css('font-size'), 10) + 4) {
        this.$runButton.css('font-size', "" + (this.$editorCont.height() - 4) + "px");
      }
      return this.$runButton.click(function() {
        return _this.execute();
      });
    };

    Editor.prototype.buildEditor = function() {
      var mirrorOpts, _ref;
      this.$editorCont = $('<div>');
      this.$editorCont.addClass('executr-code-editor');
      this.$editorCont.css({
        height: "" + (this.$el.height()) + "px",
        width: "" + (this.$el.width()) + "px"
      });
      this.$editorCont.insertBefore(this.$el);
      this.$el.detach();
      mirrorOpts = {
        value: this.$el.text(),
        mode: normalizeType((_ref = this.$el.attr('data-type')) != null ? _ref : this.opts.defaultType)
      };
      return this.editor = CodeMirror(this.$editorCont[0], $.extend(mirrorOpts, this.opts.codeMirrorOptions));
    };

    Editor.prototype.execute = function() {
      var code, codeType, output;
      code = this.getValue();
      codeType = this.editor.getMode().name;
      this.$el.trigger('executrBeforeExecute', [code, codeType, this.opts]);
      if (this.opts.setUp != null) {
        this.opts.setUp(codeType, this.opts);
      }
      switch (codeType) {
        case 'javascript':
          output = runJS(this.opts, code);
          break;
        case 'coffeescript':
          output = runCoffee(this.opts, code);
      }
      if (this.opts.tearDown != null) {
        this.opts.tearDown(output, codeType, this.opts);
      }
      this.$el.trigger('executrAfterExecute', [output, code, codeType, this.opts]);
      return insertOutput(this.opts, output);
    };

    return Editor;

  })();

  getCodeElement = function(e, opts) {
    var $code, $target;
    $target = $(e.target);
    $code = $target.parents(opts.codeSelector);
    if (!$code.length && $target.is(opts.codeSelector)) {
      $code = $target;
    }
    return $code;
  };

  insertOutput = function(opts, output) {
    if (opts.outputTo) {
      if (opts.appendOutput) {
        return $(opts.outputTo).append($('<div>').text(output));
      } else {
        return $(opts.outputTo).text(output);
      }
    }
  };

  $.fn.executr = function(opts) {
    var defaults;
    defaults = {
      codeSelector: 'code[executable]',
      outputTo: false,
      appendOutput: true,
      defaultType: 'coffee'
    };
    opts = $.extend({}, defaults, opts);
    if (this.is(opts.codeSelector)) {
      opts.codeSelector = null;
    }
    return this.find(opts.codeSelector).each(function(i, el) {
      return new Editor({
        el: el,
        opts: opts
      });
    });
  };

}).call(this);
