// Generated by CoffeeScript 1.3.3
(function() {
  var getCodeElement, insertOutput, normalizeType, runCoffee, runJS;

  runCoffee = function(opts, code) {
    var csOptions, line, output;
    csOptions = $.extend({}, opts.coffeeOptions);
    code = "window.executrResult = do ->\n" + (((function() {
      var _i, _len, _ref, _results;
      _ref = code.split('\n');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push("\t" + line);
      }
      return _results;
    })()).join('\n'));
    CoffeeScript.run(code, csOptions);
    output = window.executrResult;
    delete window.executrResult;
    return output;
  };

  runJS = function(opts, code) {
    return eval(code);
  };

  normalizeType = function(codeType) {
    switch (codeType.toLowerCase()) {
      case 'js':
      case 'javascript':
      case 'text/javascript':
      case 'application/javascript':
        return 'javascript';
      case 'cs':
      case 'coffee':
      case 'coffeescript':
      case 'text/coffeescript':
      case 'application/coffeescript':
        return 'coffeescript';
      default:
        return console.log("Code type " + codeType + " not understood.");
    }
  };

  getCodeElement = function(e, opts) {
    var $code, $target;
    $target = $(e.target);
    $code = $target.parents(opts.codeSelector);
    if (!$code.length && $target.is(opts.codeSelector)) {
      $code = $target;
    }
    return $code;
  };

  insertOutput = function(opts, output) {
    if (opts.outputTo) {
      if (opts.appendOutput) {
        return $(opts.outputTo).append($('<div>').text(output));
      } else {
        return $(opts.outputTo).text(output);
      }
    }
  };

  $.fn.executr = function(opts) {
    var defaults,
      _this = this;
    defaults = {
      codeSelector: 'code[executable]',
      outputTo: false,
      appendOutput: true,
      defaultType: 'coffee'
    };
    opts = $.extend({}, defaults, opts);
    if (this.is(opts.codeSelector)) {
      opts.codeSelector = null;
    }
    return this.on('click', opts.codeSelector, function(e) {
      var $code, code, codeType, output, _ref, _ref1;
      $code = getCodeElement(e, opts);
      code = $code.text();
      codeType = (_ref = (_ref1 = $code.attr('data-type')) != null ? _ref1 : $code.attr('type')) != null ? _ref : opts.defaultType;
      codeType = normalizeType(codeType);
      _this.trigger('executrBeforeExecute', [code, codeType, opts]);
      if (opts.setUp != null) {
        opts.setUp(codeType, opts);
      }
      switch (codeType) {
        case 'javascript':
          output = runJS(opts, code);
          break;
        case 'coffeescript':
          output = runCoffee(opts, code);
      }
      if (opts.tearDown != null) {
        opts.tearDown(output, codeType, opts);
      }
      _this.trigger('executrAfterExecute', [output, code, codeType, opts]);
      return insertOutput(opts, output);
    });
  };

}).call(this);
